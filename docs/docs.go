// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Maciej Zwierzchlewski",
            "url": "https:///maciejz.dev",
            "email": "zwierzchlewski.maciej@outlook.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/decks": {
            "post": {
                "description": "Creates a new deck.\nIf no cards are specified, a full deck is created.\nIf cards are to be in random order set the shuffled param.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "Creates a new Deck",
                "operationId": "create-deck",
                "parameters": [
                    {
                        "description": "New deck options",
                        "name": "deckOptions",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.postDeckRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.postDeckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.apiError"
                        }
                    }
                }
            }
        },
        "/decks/{id}": {
            "get": {
                "description": "Displays deck and its cards by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "Opens a Deck",
                "operationId": "get-deck-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Deck"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.apiError"
                        }
                    }
                }
            }
        },
        "/decks/{id}/{numberOfCards}": {
            "patch": {
                "description": "Draws cards from the top of the deck.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "Draws cards from a deck",
                "operationId": "draw-cards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of cards to draw",
                        "name": "numberOfCards",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.drawCardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/deckcontroller.apiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "deckcontroller.apiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Deck with id e89efc4d-9294-443a-8a54-d78cd0e8a0c9 does not exist."
                }
            }
        },
        "deckcontroller.drawCardsResponse": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Card"
                    }
                }
            }
        },
        "deckcontroller.postDeckRequest": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "AS",
                        "KD",
                        "AC",
                        "2C",
                        "KH"
                    ]
                },
                "shuffled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "deckcontroller.postDeckResponse": {
            "type": "object",
            "properties": {
                "deck_id": {
                    "type": "string",
                    "example": "e89efc4d-9294-443a-8a54-d78cd0e8a0c9"
                },
                "invalid_cards": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "0H",
                        "2P"
                    ]
                },
                "remaining": {
                    "type": "integer",
                    "example": 52
                },
                "shuffled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.Card": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "AH"
                },
                "suit": {
                    "type": "string",
                    "example": "Hearts"
                },
                "value": {
                    "type": "string",
                    "example": "Ace"
                }
            }
        },
        "models.Deck": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Card"
                    }
                },
                "deck_id": {
                    "type": "string",
                    "example": "e89efc4d-9294-443a-8a54-d78cd0e8a0c9"
                },
                "remaining": {
                    "type": "integer",
                    "example": 52
                },
                "shuffled": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "localhost:13370",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Card Deck API",
	Description: "This a card deck api server.\nMade for Toggl.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
